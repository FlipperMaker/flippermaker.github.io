import keyboard
import time
from time import sleep
from threading import Timer


altCode_to_unicode = {'0': '0000', '1': '263A', '2': '263B', '3': '2665', '4': '2666', '5': '2663', '6': '2660', '7': '2022', '8': '25D8', '9': '25CB', '10': '25D9', '11': '2642', '12': '2640', '13': '266A', '14': '266B', '15': '263C', '16': '25BA', '17': '25C4', '18': '2195', '19': '203C', '20': '00B6', '21': '00A7', '22': '25AC', '23': '21A8', '24': '2191', '25': '2193', '26': '2192', '27': '2190', '28': '221F', '29': '2194', '30': '25B2', '31': '25BC', '32': '0020', '33': '0021', '34': '0022', '35': '0023', '36': '0024', '37': '0025', '38': '0026', '39': '0027', '40': '0028', '41': '0029', '42': '002A', '43': '002B', '44': '002C', '45': '002D', '46': '002E', '47': '002F', '48': '0030', '49': '0031', '50': '0032', '51': '0033', '52': '0034', '53': '0035', '54': '0036', '55': '0037', '56': '0038', '57': '0039', '58': '003A', '59': '003B', '60': '003C', '61': '003D', '62': '003E', '63': '003F', '64': '0040', '65': '0041', '66': '0042', '67': '0043', '68': '0044', '69': '0045', '70': '0046', '71': '0047', '72': '0048', '73': '0049', '74': '004A', '75': '004B', '76': '004C', '77': '004D', '78': '004E', '79': '004F', '80': '0050', '81': '0051', '82': '0052', '83': '0053', '84': '0054', '85': '0055', '86': '0056', '87': '0057', '88': '0058', '89': '0059', '90': '005A', '91': '005B', '92': '005C', '93': '005D', '94': '005E', '95': '005F', '96': '0060', '97': '0061', '98': '0062', '99': '0063', '100': '0064', '101': '0065', '102': '0066', '103': '0067', '104': '0068', '105': '0069', '106': '006A', '107': '006B', '108': '006C', '109': '006D', '110': '006E', '111': '006F', '112': '0070', '113': '0071', '114': '0072', '115': '0073', '116': '0074', '117': '0075', '118': '0076', '119': '0077', '120': '0078', '121': '0079', '122': '007A', '123': '007B', '124': '007C', '125': '007D', '126': '007E', '127': '2302', '128': '00C7', '129': '00FC', '130': '00E9', '131': '00E2', '132': '00E4', '133': '00E0', '134': '00E5', '135': '00E7', '136': '00EA', '137': '00EB', '138': '00E8', '139': '00EF', '140': '00EE', '141': '00EC', '142': '00C4', '143': '00C5', '144': '00C9', '145': '00E6', '146': '00C6', '147': '00F4', '148': '00F6', '149': '00F2', '150': '00FB', '151': '00F9', '152': '00FF', '153': '00D6', '154': '00DC', '155': '00A2', '156': '00A3', '157': '00A5', '158': '20A7', '159': '0192', '160': '00E1', '161': '00ED', '162': '00F3', '163': '00FA', '164': '00F1', '165': '00D1', '166': '00AA', '167': '00BA', '168': '00BF', '169': '2310', '170': '00AC', '171': '00BD', '172': '00BC', '173': '00A1', '174': '00AB', '175': '00BB', '176': '2591', '177': '2592', '178': '2593', '179': '2502', '180': '2524', '181': '2561', '182': '2562', '183': '2556', '184': '2555', '185': '2563', '186': '2551', '187': '2557', '188': '255D', '189': '255C', '190': '255B', '191': '2510', '192': '2514', '193': '2534', '194': '252C', '195': '251C', '196': '2500', '197': '253C', '198': '255E', '199': '255F', '200': '255A', '201': '2554', '202': '2569', '203': '2566', '204': '2560', '205': '2550', '206': '256C', '207': '2567', '208': '2568', '209': '2564', '210': '2565', '211': '2559', '212': '2558', '213': '2552', '214': '2553', '215': '256B', '216': '256A', '217': '2518', '218': '250C', '219': '2588', '220': '2584', '221': '258C', '222': '2590', '223': '2580', '224': '03B1', '225': '00DF', '226': '0393', '227': '03C0', '228': '03A3', '229': '03C3', '230': '00B5', '231': '03A4', '232': '03A6', '233': '0398', '234': '03A9', '235': '03B4', '236': '221E', '237': '03C6', '238': '03B5', '239': '2229', '240': '2261', '241': '00B1', '242': '2265', '243': '2264', '244': '2320', '245': '2321', '246': '00F7', '247': '2248', '248': '00B0', '249': '2219', '250': '00B7', '251': '221A', '252': '207F', '253': '00B2', '254': '25A0', '255': '00A0', '0': '0000', '01': '0001', '02': '0002', '03': '0003', '04': '0004', '05': '0005', '06': '0006', '07': '0007', '08': '0008', '09': '0009', '010': '000A', '011': '000B', '012': '000C', '013': '000D', '014': '000E', '015': '000F', '016': '0010', '017': '0011', '018': '0012', '019': '0013', '020': '0014', '021': '0015', '022': '0016', '023': '0017', '024': '0018', '025': '0019', '026': '001A', '027': '001B', '028': '001C', '029': '001D', '030': '001E', '031': '001F', '032': '0020', '033': '0021', '034': '0022', '035': '0023', '036': '0024', '037': '0025', '038': '0026', '039': '0027', '040': '0028', '041': '0029', '042': '002A', '043': '002B', '044': '002C', '045': '002D', '046': '002E', '047': '002F', '048': '0030', '049': '0031', '050': '0032', '051': '0033', '052': '0034', '053': '0035', '054': '0036', '055': '0037', '056': '0038', '057': '0039', '058': '003A', '059': '003B', '060': '003C', '061': '003D', '062': '003E', '063': '003F', '064': '0040', '065': '0041', '066': '0042', '067': '0043', '068': '0044', '069': '0045', '070': '0046', '071': '0047', '072': '0048', '073': '0049', '074': '004A', '075': '004B', '076': '004C', '077': '004D', '078': '004E', '079': '004F', '080': '0050', '081': '0051', '082': '0052', '083': '0053', '084': '0054', '085': '0055', '086': '0056', '087': '0057', '088': '0058', '089': '0059', '090': '005A', '091': '005B', '092': '005C', '093': '005D', '094': '005E', '095': '005F', '096': '0060', '097': '0061', '098': '0062', '099': '0063', '0100': '0064', '0101': '0065', '0102': '0066', '0103': '0067', '0104': '0068', '0105': '0069', '0106': '006A', '0107': '006B', '0108': '006C', '0109': '006D', '0110': '006E', '0111': '006F', '0112': '0070', '0113': '0071', '0114': '0072', '0115': '0073', '0116': '0074', '0117': '0075', '0118': '0076', '0119': '0077', '0120': '0078', '0121': '0079', '0122': '007A', '0123': '007B', '0124': '007C', '0125': '007D', '0126': '007E', '0127': '007F', '0128': '20AC', '0129': '0081', '0130': '201A', '0131': '0192', '0132': '201E', '0133': '2026', '0134': '2020', '0135': '2021', '0136': '02C6', '0137': '2030', '0138': '0160', '0139': '2039', '0140': '0152', '0141': '008D', '0142': '017D', '0143': '008F', '0144': '0090', '0145': '2018', '0146': '2019', '0147': '201C', '0148': '201D', '0149': '2022', '0150': '2013', '0151': '2014', '0152': '02DC', '0153': '2122', '0154': '0161', '0155': '203A', '0156': '0153', '0157': '009D', '0158': '017E', '0159': '0178', '0160': '00A0', '0161': '00A1', '0162': '00A2', '0163': '00A3', '0164': '00A4', '0165': '00A5', '0166': '00A6', '0167': '00A7', '0168': '00A8', '0169': '00A9', '0170': '00AA', '0171': '00AB', '0172': '00AC', '0173': '00AD', '0174': '00AE', '0175': '00AF', '0176': '00B0', '0177': '00B1', '0178': '00B2', '0179': '00B3', '0180': '00B4', '0181': '00B5', '0182': '00B6', '0183': '00B7', '0184': '00B8', '0185': '00B9', '0186': '00BA', '0187': '00BB', '0188': '00BC', '0189': '00BD', '0190': '00BE', '0191': '00BF', '0192': '00C0', '0193': '00C1', '0194': '00C2', '0195': '00C3', '0196': '00C4', '0197': '00C5', '0198': '00C6', '0199': '00C7', '0200': '00C8', '0201': '00C9', '0202': '00CA', '0203': '00CB', '0204': '00CC', '0205': '00CD', '0206': '00CE', '0207': '00CF', '0208': '00D0', '0209': '00D1', '0210': '00D2', '0211': '00D3', '0212': '00D4', '0213': '00D5', '0214': '00D6', '0215': '00D7', '0216': '00D8', '0217': '00D9', '0218': '00DA', '0219': '00DB', '0220': '00DC', '0221': '00DD', '0222': '00DE', '0223': '00DF', '0224': '00E0', '0225': '00E1', '0226': '00E2', '0227': '00E3', '0228': '00E4', '0229': '00E5', '0230': '00E6', '0231': '00E7', '0232': '00E8', '0233': '00E9', '0234': '00EA', '0235': '00EB', '0236': '00EC', '0237': '00ED', '0238': '00EE', '0239': '00EF', '0240': '00F0', '0241': '00F1', '0242': '00F2', '0243': '00F3', '0244': '00F4', '0245': '00F5', '0246': '00F6', '0247': '00F7', '0248': '00F8', '0249': '00F9', '0250': '00FA', '0251': '00FB', '0252': '00FC', '0253': '00FD', '0254': '00FE', '0255': '00FF'}
altCode_to_unicodeU = {'0': u'\u0000', '1': u'\u263A', '2': u'\u263B', '3': u'\u2665', '4': u'\u2666', '5': u'\u2663', '6': u'\u2660', '7': u'\u2022', '8': u'\u25D8', '9': u'\u25CB', '10': u'\u25D9', '11': u'\u2642', '12': u'\u2640', '13': u'\u266A', '14': u'\u266B', '15': u'\u263C', '16': u'\u25BA', '17': u'\u25C4', '18': u'\u2195', '19': u'\u203C', '20': u'\u00B6', '21': u'\u00A7', '22': u'\u25AC', '23': u'\u21A8', '24': u'\u2191', '25': u'\u2193', '26': u'\u2192', '27': u'\u2190', '28': u'\u221F', '29': u'\u2194', '30': u'\u25B2', '31': u'\u25BC', '32': u'\u0020', '33': u'\u0021', '34': u'\u0022', '35': u'\u0023', '36': u'\u0024', '37': u'\u0025', '38': u'\u0026', '39': u'\u0027', '40': u'\u0028', '41': u'\u0029', '42': u'\u002A', '43': u'\u002B', '44': u'\u002C', '45': u'\u002D', '46': u'\u002E', '47': u'\u002F', '48': u'\u0030', '49': u'\u0031', '50': u'\u0032', '51': u'\u0033', '52': u'\u0034', '53': u'\u0035', '54': u'\u0036', '55': u'\u0037', '56': u'\u0038', '57': u'\u0039', '58': u'\u003A', '59': u'\u003B', '60': u'\u003C', '61': u'\u003D', '62': u'\u003E', '63': u'\u003F', '64': u'\u0040', '65': u'\u0041', '66': u'\u0042', '67': u'\u0043', '68': u'\u0044', '69': u'\u0045', '70': u'\u0046', '71': u'\u0047', '72': u'\u0048', '73': u'\u0049', '74': u'\u004A', '75': u'\u004B', '76': u'\u004C', '77': u'\u004D', '78': u'\u004E', '79': u'\u004F', '80': u'\u0050', '81': u'\u0051', '82': u'\u0052', '83': u'\u0053', '84': u'\u0054', '85': u'\u0055', '86': u'\u0056', '87': u'\u0057', '88': u'\u0058', '89': u'\u0059', '90': u'\u005A', '91': u'\u005B', '92': u'\u005C', '93': u'\u005D', '94': u'\u005E', '95': u'\u005F', '96': u'\u0060', '97': u'\u0061', '98': u'\u0062', '99': u'\u0063', '100': u'\u0064', '101': u'\u0065', '102': u'\u0066', '103': u'\u0067', '104': u'\u0068', '105': u'\u0069', '106': u'\u006A', '107': u'\u006B', '108': u'\u006C', '109': u'\u006D', '110': u'\u006E', '111': u'\u006F', '112': u'\u0070', '113': u'\u0071', '114': u'\u0072', '115': u'\u0073', '116': u'\u0074', '117': u'\u0075', '118': u'\u0076', '119': u'\u0077', '120': u'\u0078', '121': u'\u0079', '122': u'\u007A', '123': u'\u007B', '124': u'\u007C', '125': u'\u007D', '126': u'\u007E', '127': u'\u2302', '128': u'\u00C7', '129': u'\u00FC', '130': u'\u00E9', '131': u'\u00E2', '132': u'\u00E4', '133': u'\u00E0', '134': u'\u00E5', '135': u'\u00E7', '136': u'\u00EA', '137': u'\u00EB', '138': u'\u00E8', '139': u'\u00EF', '140': u'\u00EE', '141': u'\u00EC', '142': u'\u00C4', '143': u'\u00C5', '144': u'\u00C9', '145': u'\u00E6', '146': u'\u00C6', '147': u'\u00F4', '148': u'\u00F6', '149': u'\u00F2', '150': u'\u00FB', '151': u'\u00F9', '152': u'\u00FF', '153': u'\u00D6', '154': u'\u00DC', '155': u'\u00A2', '156': u'\u00A3', '157': u'\u00A5', '158': u'\u20A7', '159': u'\u0192', '160': u'\u00E1', '161': u'\u00ED', '162': u'\u00F3', '163': u'\u00FA', '164': u'\u00F1', '165': u'\u00D1', '166': u'\u00AA', '167': u'\u00BA', '168': u'\u00BF', '169': u'\u2310', '170': u'\u00AC', '171': u'\u00BD', '172': u'\u00BC', '173': u'\u00A1', '174': u'\u00AB', '175': u'\u00BB', '176': u'\u2591', '177': u'\u2592', '178': u'\u2593', '179': u'\u2502', '180': u'\u2524', '181': u'\u2561', '182': u'\u2562', '183': u'\u2556', '184': u'\u2555', '185': u'\u2563', '186': u'\u2551', '187': u'\u2557', '188': u'\u255D', '189': u'\u255C', '190': u'\u255B', '191': u'\u2510', '192': u'\u2514', '193': u'\u2534', '194': u'\u252C', '195': u'\u251C', '196': u'\u2500', '197': u'\u253C', '198': u'\u255E', '199': u'\u255F', '200': u'\u255A', '201': u'\u2554', '202': u'\u2569', '203': u'\u2566', '204': u'\u2560', '205': u'\u2550', '206': u'\u256C', '207': u'\u2567', '208': u'\u2568', '209': u'\u2564', '210': u'\u2565', '211': u'\u2559', '212': u'\u2558', '213': u'\u2552', '214': u'\u2553', '215': u'\u256B', '216': u'\u256A', '217': u'\u2518', '218': u'\u250C', '219': u'\u2588', '220': u'\u2584', '221': u'\u258C', '222': u'\u2590', '223': u'\u2580', '224': u'\u03B1', '225': u'\u00DF', '226': u'\u0393', '227': u'\u03C0', '228': u'\u03A3', '229': u'\u03C3', '230': u'\u00B5', '231': u'\u03A4', '232': u'\u03A6', '233': u'\u0398', '234': u'\u03A9', '235': u'\u03B4', '236': u'\u221E', '237': u'\u03C6', '238': u'\u03B5', '239': u'\u2229', '240': u'\u2261', '241': u'\u00B1', '242': u'\u2265', '243': u'\u2264', '244': u'\u2320', '245': u'\u2321', '246': u'\u00F7', '247': u'\u2248', '248': u'\u00B0', '249': u'\u2219', '250': u'\u00B7', '251': u'\u221A', '252': u'\u207F', '253': u'\u00B2', '254': u'\u25A0', '255': u'\u00A0', '0': u'\u0000', '01': u'\u0001', '02': u'\u0002', '03': u'\u0003', '04': u'\u0004', '05': u'\u0005', '06': u'\u0006', '07': u'\u0007', '08': u'\u0008', '09': u'\u0009', '010': u'\u000A', '011': u'\u000B', '012': u'\u000C', '013': u'\u000D', '014': u'\u000E', '015': u'\u000F', '016': u'\u0010', '017': u'\u0011', '018': u'\u0012', '019': u'\u0013', '020': u'\u0014', '021': u'\u0015', '022': u'\u0016', '023': u'\u0017', '024': u'\u0018', '025': u'\u0019', '026': u'\u001A', '027': u'\u001B', '028': u'\u001C', '029': u'\u001D', '030': u'\u001E', '031': u'\u001F', '032': u'\u0020', '033': u'\u0021', '034': u'\u0022', '035': u'\u0023', '036': u'\u0024', '037': u'\u0025', '038': u'\u0026', '039': u'\u0027', '040': u'\u0028', '041': u'\u0029', '042': u'\u002A', '043': u'\u002B', '044': u'\u002C', '045': u'\u002D', '046': u'\u002E', '047': u'\u002F', '048': u'\u0030', '049': u'\u0031', '050': u'\u0032', '051': u'\u0033', '052': u'\u0034', '053': u'\u0035', '054': u'\u0036', '055': u'\u0037', '056': u'\u0038', '057': u'\u0039', '058': u'\u003A', '059': u'\u003B', '060': u'\u003C', '061': u'\u003D', '062': u'\u003E', '063': u'\u003F', '064': u'\u0040', '065': u'\u0041', '066': u'\u0042', '067': u'\u0043', '068': u'\u0044', '069': u'\u0045', '070': u'\u0046', '071': u'\u0047', '072': u'\u0048', '073': u'\u0049', '074': u'\u004A', '075': u'\u004B', '076': u'\u004C', '077': u'\u004D', '078': u'\u004E', '079': u'\u004F', '080': u'\u0050', '081': u'\u0051', '082': u'\u0052', '083': u'\u0053', '084': u'\u0054', '085': u'\u0055', '086': u'\u0056', '087': u'\u0057', '088': u'\u0058', '089': u'\u0059', '090': u'\u005A', '091': u'\u005B', '092': u'\u005C', '093': u'\u005D', '094': u'\u005E', '095': u'\u005F', '096': u'\u0060', '097': u'\u0061', '098': u'\u0062', '099': u'\u0063', '0100': u'\u0064', '0101': u'\u0065', '0102': u'\u0066', '0103': u'\u0067', '0104': u'\u0068', '0105': u'\u0069', '0106': u'\u006A', '0107': u'\u006B', '0108': u'\u006C', '0109': u'\u006D', '0110': u'\u006E', '0111': u'\u006F', '0112': u'\u0070', '0113': u'\u0071', '0114': u'\u0072', '0115': u'\u0073', '0116': u'\u0074', '0117': u'\u0075', '0118': u'\u0076', '0119': u'\u0077', '0120': u'\u0078', '0121': u'\u0079', '0122': u'\u007A', '0123': u'\u007B', '0124': u'\u007C', '0125': u'\u007D', '0126': u'\u007E', '0127': u'\u007F', '0128': u'\u20AC', '0129': u'\u0081', '0130': u'\u201A', '0131': u'\u0192', '0132': u'\u201E', '0133': u'\u2026', '0134': u'\u2020', '0135': u'\u2021', '0136': u'\u02C6', '0137': u'\u2030', '0138': u'\u0160', '0139': u'\u2039', '0140': u'\u0152', '0141': u'\u008D', '0142': u'\u017D', '0143': u'\u008F', '0144': u'\u0090', '0145': u'\u2018', '0146': u'\u2019', '0147': u'\u201C', '0148': u'\u201D', '0149': u'\u2022', '0150': u'\u2013', '0151': u'\u2014', '0152': u'\u02DC', '0153': u'\u2122', '0154': u'\u0161', '0155': u'\u203A', '0156': u'\u0153', '0157': u'\u009D', '0158': u'\u017E', '0159': u'\u0178', '0160': u'\u00A0', '0161': u'\u00A1', '0162': u'\u00A2', '0163': u'\u00A3', '0164': u'\u00A4', '0165': u'\u00A5', '0166': u'\u00A6', '0167': u'\u00A7', '0168': u'\u00A8', '0169': u'\u00A9', '0170': u'\u00AA', '0171': u'\u00AB', '0172': u'\u00AC', '0173': u'\u00AD', '0174': u'\u00AE', '0175': u'\u00AF', '0176': u'\u00B0', '0177': u'\u00B1', '0178': u'\u00B2', '0179': u'\u00B3', '0180': u'\u00B4', '0181': u'\u00B5', '0182': u'\u00B6', '0183': u'\u00B7', '0184': u'\u00B8', '0185': u'\u00B9', '0186': u'\u00BA', '0187': u'\u00BB', '0188': u'\u00BC', '0189': u'\u00BD', '0190': u'\u00BE', '0191': u'\u00BF', '0192': u'\u00C0', '0193': u'\u00C1', '0194': u'\u00C2', '0195': u'\u00C3', '0196': u'\u00C4', '0197': u'\u00C5', '0198': u'\u00C6', '0199': u'\u00C7', '0200': u'\u00C8', '0201': u'\u00C9', '0202': u'\u00CA', '0203': u'\u00CB', '0204': u'\u00CC', '0205': u'\u00CD', '0206': u'\u00CE', '0207': u'\u00CF', '0208': u'\u00D0', '0209': u'\u00D1', '0210': u'\u00D2', '0211': u'\u00D3', '0212': u'\u00D4', '0213': u'\u00D5', '0214': u'\u00D6', '0215': u'\u00D7', '0216': u'\u00D8', '0217': u'\u00D9', '0218': u'\u00DA', '0219': u'\u00DB', '0220': u'\u00DC', '0221': u'\u00DD', '0222': u'\u00DE', '0223': u'\u00DF', '0224': u'\u00E0', '0225': u'\u00E1', '0226': u'\u00E2', '0227': u'\u00E3', '0228': u'\u00E4', '0229': u'\u00E5', '0230': u'\u00E6', '0231': u'\u00E7', '0232': u'\u00E8', '0233': u'\u00E9', '0234': u'\u00EA', '0235': u'\u00EB', '0236': u'\u00EC', '0237': u'\u00ED', '0238': u'\u00EE', '0239': u'\u00EF', '0240': u'\u00F0', '0241': u'\u00F1', '0242': u'\u00F2', '0243': u'\u00F3', '0244': u'\u00F4', '0245': u'\u00F5', '0246': u'\u00F6', '0247': u'\u00F7', '0248': u'\u00F8', '0249': u'\u00F9', '0250': u'\u00FA', '0251': u'\u00FB', '0252': u'\u00FC', '0253': u'\u00FD', '0254': u'\u00FE', '0255': u'\u00FF'}

class RepeatedTimer(object):
    def __init__(self, interval, function, *args, **kwargs):
        self._timer = None
        self.interval = interval
        self.function = function
        self.args = args
        self.kwargs = kwargs
        self.is_running = False
        self.next_call = time.time()
    def _run(self):
        self.is_running = False
        self.start()
        self.function(*self.args, **self.kwargs)
    def start(self):
        if not self.is_running:
            self.next_call += self.interval
            self._timer = Timer(self.next_call - time.time(), self._run)
            self._timer.start()
            self.is_running = True
    def stop(self):
        self._timer.cancel()
        self.is_running = False

class Keylogger:
    def __init__(self):
        self.cls()
        self.running = False
        self.log = ""
        self.logEvents = []
        self.lastKey = ''
        self.keysDown = []
        self.last = time.time() #unit = seconds
        self.waitToPrintSinceLastEvent = 3.0 #seconds
        self.repeat_timer = RepeatedTimer(1.0, self.print_keys, False)
        self.repeat_timer.start()
        self.skipPrintKeyUp = ['backspace', 'caps lock', 'enter', 'space', 'delete', 'up', 'down', 'left', 'right']
        self.translateName = {'decimal':'.'} #, 'space': ' ', 'enter': ' '

        self.keyboard_modifiers = ['alt', 'alt gr', 'ctrl', 'left alt',
                                   'left ctrl', 'left shift', 'left windows',
                                   'right alt', 'right ctrl', 'right shift',
                                   'right windows', 'shift', 'windows']
        self.keyboard_sided_modifiers = ['alt', 'ctrl', 'shift', 'windows']

    def cls(self):
        for i in range(int(60/10)): print("\n"*10)
        
    def hexToString(self, h):
        try: return bytes.fromhex(h).decode('utf-8')
        except: return False#return f'0x{h}'
        
    def parse_line(self, line):
        line = str(line).strip()
        lineOriginal = line
        if '[ALT]' in line and '[/ALT]' in line:
            if '[ALT]' == line[0:5] and '[/ALT]' == line[-6:]:
                line = line.replace('[ALT]','').replace('[/ALT]','')
                line = line.replace('[','').replace(']','').replace(' ','')
                if '/' not in line:
                    if line.isnumeric():
                        #print(f'\nLINE:{line}\n')
                        n = int(line)
                        nh = hex(n)[2:]
                        ns = self.hexToString(nh)
                        ns = chr(n) if ns is False else ns
                        uc = f'{str(altCode_to_unicodeU[line])}  U+{str(altCode_to_unicode[line])}' if line in altCode_to_unicodeU else ''
                        return f'Alt Code:\n\tint:{n}\n\thex:{nh}\n\tstr:{ns}\n\tunicode:{uc}\n\toriginal:{lineOriginal}\n'
            elif line.find('[ALT]') >=0 and line.find('[/ALT]') >=0:
                a = line.find('[ALT]')
                b = line.find('[/ALT]', a)
                if a >= 0 and b >= 0:
                    c = line[a:b+6]
                    cl = len(c)
                    if cl >= 14 and cl <= 23:
                        d = c.replace('[ALT]','').replace('[/ALT]','')
                        d = d.replace('[','').replace(']','').replace(' ','')
                        if '/' not in d and d.isnumeric():
                            lea = []
                            leb = []
                            ledone = 0
                            for ii,i in enumerate(self.logEvents):
                                if ledone < 2:
                                    if i.name == 'alt':
                                        ledone = ledone + 1
                                        if ledone == 1: lea = self.logEvents[0:ii-1]
                                        elif ledone == 2: leb = self.logEvents[ii+cl:]
                            #print(f'\nC:{c}  D:{d}\n')
                            n = int(d)
                            nh = hex(n)[2:]
                            ns = self.hexToString(nh)
                            ns = chr(n) if ns is False else ns
                            uc = f'{str(altCode_to_unicodeU[d])}  U+{str(altCode_to_unicode[d])}' if line in altCode_to_unicodeU else ''
                            altText = f'Alt Code:\n\tint:{n}\n\thex:{nh}\n\tstr:{ns}\n\tunicode:{uc}\n\toriginal:{c}\n'
                            #r = self.parse_line()
                            pa = line[0:a].strip()
                            pb = line[b+6:].strip()
                            par = ''
                            pbr = ''
                            self.logEvents = lea
                            if len(pa) > 0: par = self.parse_line(pa)
                            self.logEvents = leb
                            if len(pb) > 0: pbr = self.parse_line(pb)#SHOULD NEVER GET TO THIS POINT!
                            if len(pb) > 0: print('!!!!!!!!!POSSIBLE PARSE ERROR')
                            r = ''
                            if len(par) > 0: r = par + '\n'
                            r = r + altText
                            if pbr is not False:
                                if len(pbr) > 0: r = r + pbr + '\n'
                            return r
                        #print('test',line[a:b+6], len(line[a:b+6]), len('[ALT][1][1][1][1][/ALT]'))
        else:
            return self.parse_line_b(line)
        return False
    
    def parse_line_b(self, line):
        ret = ''
        parsedKeyEvents = ''.join(keyboard.get_typed_strings(self.logEvents))
        parsedKeyEvents = parsedKeyEvents.strip()
        if len(parsedKeyEvents) > 0:
            ret = f'Parsed_B: {parsedKeyEvents}  (Original: {line})'
            return ret
        return False
    def reset(self):
        self.running = False
        self.repeat_timer.stop()
        print('Restarting')
        self.log = ''
        self.logEvents = []
        self.lastKey = ''
        self.keysDown = []
        self.running = True
        self.repeat_timer = RepeatedTimer(1.0, self.print_keys, False)
        self.repeat_timer.start()
        
    def print_keys(self, skipTimeCheck = False):
        #print(self.keysDown)
        #print(time.time() - self.last)
        try:
            if not self.running: return
            if len(self.log.strip()) == 0: return
            if time.time() - self.last < self.waitToPrintSinceLastEvent and not skipTimeCheck: return
            if len(self.keysDown) > 0: return
            parsedb = self.parse_line_b(self.log)
            parsed = self.parse_line(self.log)
            if parsed is False: print(self.log)
            else: print(parsed)
            if parsedb is False: pass
            else: print('\n\nFULL:',parsedb)
            
            self.logEvents = []
            self.log = ''
            #keyboard.read_event()
        except:
            self.reset()
        
        
    def log_key(self, event):
        self.logEvents.append(event)
##        a = keyboard.stash_state()
        name = event.name
        down = False if event.event_type == 'up' else True
        up = not down
        if up and event.scan_code in self.keysDown: self.keysDown.remove(event.scan_code)
        if down and event.scan_code not in self.keysDown: self.keysDown.append(event.scan_code)
        upSlash = ''
        forcePrint = False
        if name is not None and name != 'none':
            upSlash = '/' if not down and len(name) > 1 else ''
            if len(name) <= 1 and not down: return
            if name in self.skipPrintKeyUp and up: return
            name = name.upper()
            forcePrint = True if not down and len(name) > 1 else False
        else:
            if not down: return
            name = f"!ERROR-{name}!"
        tempKey = f"[{upSlash}{name}]"
        #print('last:', tempKey, self.lastKey, tempKey == self.lastKey)
        if tempKey == self.lastKey:
            if name.lower() not in self.keyboard_modifiers:
                #if name in self.skipPrintKeyUp and up:
                self.log += tempKey
        else:
            self.log += tempKey
        self.lastKey = tempKey
        self.last = time.time()
        if forcePrint: self.print_keys(True)
        
        
    def callback(self, e):
        #line = ', '.join(str(code) for code in keyboard._pressed_events)
        #print(e.device, e.event_type, e.is_keypad, e.modifiers, e.name, e.scan_code, e.time, e.to_json(False))
        self.log_key(e)
        
    def start(self):
        self.running = True
        keyboard.hook(self.callback)
        keyboard.wait()
        print('broke')


if __name__ == "__main__":
    keylogger = Keylogger()
    
    keylogger.start()















    

        
